const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs');

const token = '7307573228:AAEZ-n22-KGt4OCx8TmwiQqjY4C7b0dKhoo';
const yandexApiKey = '3336a293-1de9-417d-8e5e-31288126061c';  // API –∫–ª—é—á –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
const adminUsername = 'botiroffb';  // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const adminChatId = '349284259';

const bot = new TelegramBot(token, { polling: true });
const databaseFile = './database.json';

const states = {};
const ASK_ORIGIN = 'ASK_ORIGIN';
const ASK_DESTINATION = 'ASK_DESTINATION';
const BROADCAST_MESSAGE = 'BROADCAST_MESSAGE';
const BROADCAST_PHOTO = 'BROADCAST_PHOTO';
const CHANGE_STATUS = 'CHANGE_STATUS';
const VIEW_USER = 'VIEW_USER';

const mainMenu = {
  reply_markup: {
    keyboard: [
      [{ text: 'üöñ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏' }],
      [{ text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  }
};

const adminMenu = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'users' }],
      [{ text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞', callback_data: 'broadcast' }],
      [{ text: 'üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏', callback_data: 'exit_admin' }]
    ]
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
function readDatabase() {
  if (!fs.existsSync(databaseFile)) {
    fs.writeFileSync(databaseFile, JSON.stringify({ users: [] }, null, 2));
  }
  const data = fs.readFileSync(databaseFile, 'utf8');
  return JSON.parse(data);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON
function writeDatabase(data) {
  fs.writeFileSync(databaseFile, JSON.stringify(data, null, 2), 'utf8');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
function upsertUser(user) {
  const database = readDatabase();
  const existingUserIndex = database.users.findIndex(u => u.userId === user.userId);

  if (existingUserIndex === -1) {
    database.users.push(user);
  } else {
    const existingUser = database.users[existingUserIndex];
    existingUser.username = user.username;
    existingUser.trackingId = user.trackingId;
    if (!existingUser.invited_by && user.invited_by) {
      existingUser.invited_by = user.invited_by;
    }
  }

  writeDatabase(database);
  console.log('Database updated:', database);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateLimit(inviterId) {
  const database = readDatabase();
  const inviter = database.users.find(u => u.userId === inviterId);

  if (inviter) {
    inviter.limit_status = 1;
    writeDatabase(database);

    bot.sendMessage(inviter.userId, 'üéâ –í–∞—à –ª–∏–º–∏—Ç —Å–Ω—è—Ç! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.');
    console.log(`Inviter ${inviter.username} limit status updated.`);
  } else {
    console.log(`Inviter with ID ${inviterId} not found.`);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
bot.onText(/\/start(?:\s+(\d+))?/, (msg, match) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || 'undefined';
  const referredById = match[1] ? parseInt(match[1], 10) : null;

  console.log('Start command received:', { chatId, username, referredById });

  const database = readDatabase();
  let user = database.users.find(u => u.userId === chatId);

  if (!user) {
    user = {
      id: uuidv4(),
      username: username,
      userId: chatId,
      trackingId: uuidv4(),
      limit_status: 0,
      usage_count: 0,
      invited_by: referredById
    };

    upsertUser(user);

    if (referredById) {
      console.log(`Updating limit for inviter: ${referredById}`);
      updateLimit(referredById);
    }

    // Send notification to admin about the new user
    if (username !== 'undefined') {
      bot.sendMessage(adminChatId, `üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [@${username}](https://t.me/${username})`, { parse_mode: 'Markdown' });
    } else {
      bot.sendMessage(adminChatId, `üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID ${chatId}`);
    }

  } else {
    user.username = username;
    user.trackingId = uuidv4();
    if (!user.invited_by && referredById) {
      user.invited_by = referredById;
      console.log(`Updating limit for inviter: ${referredById}`);
      updateLimit(referredById);
    }

    upsertUser(user);
  }

  bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', mainMenu);
});

bot.onText(/\/adminpanel/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || 'undefined';

  console.log('Admin panel command received:', { chatId, username });

  if (username !== adminUsername) {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    return;
  }

  const database = readDatabase();
  const inlineKeyboard = database.users.map(user => [{ text: `${user.username} (ID: ${user.id})`, callback_data: `view_user_${user.id}` }]);
  inlineKeyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_admin' }]);

  bot.sendMessage(chatId, 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', {
    reply_markup: {
      inline_keyboard: inlineKeyboard
    }
  });
});

bot.on('callback_query', (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const username = callbackQuery.from.username || 'undefined';

  console.log('Callback query received:', { chatId, username, data: callbackQuery.data });

  if (username !== adminUsername) {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    return;
  }

  const data = callbackQuery.data;
  const database = readDatabase();

  if (data.startsWith('view_user_')) {
    const userId = data.split('_')[2];
    const user = database.users.find(u => u.id === userId);

    if (user) {
      let response = `üÜî –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}\n`;
      response += `üë§ Username: ${user.username}\n`;
      response += `üÜî User ID: ${user.userId}\n`;
      response += `üìç Tracking ID: ${user.trackingId}\n`;
      response += `üö´ Limit Status: ${user.limit_status ? 'No limit' : 'Limited'}\n`;
      response += `üîÑ Usage Count: ${user.usage_count}\n`;
      response += `üßë‚Äçü§ù‚Äçüßë Invited By: ${user.invited_by || 'None'}\n`;

      const opts = {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `change_status_${user.id}` }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'users' }]
          ]
        }
      };

      bot.editMessageText(response, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: opts.reply_markup
      });
    } else {
      bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
    return;
  }

  if (data.startsWith('change_status_')) {
    const userId = data.split('_')[2];
    states[chatId] = { type: CHANGE_STATUS, userId: userId };
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (0 - Limited, 1 - No limit):');
    return;
  }

  switch (data) {
    case 'broadcast':
      bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìù –¢–µ–∫—Å—Ç', callback_data: 'broadcast_text' }],
            [{ text: 'üì∏ –§–æ—Ç–æ', callback_data: 'broadcast_photo' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_admin' }]
          ]
        }
      });
      break;
    case 'broadcast_text':
      states[chatId] = BROADCAST_MESSAGE;
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
      break;
    case 'broadcast_photo':
      states[chatId] = BROADCAST_PHOTO;
      bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
      break;
    case 'exit_admin':
      bot.editMessageText('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏.', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: []
        }
      });
      bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', mainMenu);
      break;
    case 'back_to_admin':
      bot.editMessageText('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: adminMenu.reply_markup
      });
      break;
    default:
      bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');
  }
});

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || 'undefined';

  console.log('Message received:', { chatId, username, text: msg.text });

  if (states[chatId] && states[chatId].type === CHANGE_STATUS) {
    const newStatus = parseInt(msg.text);
    if (isNaN(newStatus) || (newStatus !== 0 && newStatus !== 1)) {
      bot.sendMessage(chatId, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è Limited –∏–ª–∏ 1 –¥–ª—è No limit.');
      return;
    }

    const database = readDatabase();
    const user = database.users.find(u => u.id === states[chatId].userId);
    if (user) {
      user.limit_status = newStatus;
      writeDatabase(database);
      bot.sendMessage(chatId, `–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${user.id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newStatus ? 'No limit' : 'Limited'}.`);
    } else {
      bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    delete states[chatId];
    return;
  }

  if (states[chatId] === BROADCAST_MESSAGE) {
    if (username !== adminUsername) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }

    const broadcastMessage = msg.text;
    const database = readDatabase();

    database.users.forEach(user => {
      bot.sendMessage(user.userId, broadcastMessage);
    });

    bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');

    delete states[chatId];
    return;
  }

  if (states[chatId] === BROADCAST_PHOTO) {
    if (username !== adminUsername) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }

    if (msg.photo) {
      const caption = msg.caption || '';
      const database = readDatabase();

      database.users.forEach(user => {
        bot.sendPhoto(user.userId, msg.photo[msg.photo.length - 1].file_id, { caption });
      });

      bot.sendMessage(chatId, '–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.');

      delete states[chatId];
      return;
    }
  }

  checkUsageLimit(chatId, () => {
    if (msg.text === 'üöñ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏') {
      states[chatId] = ASK_ORIGIN;
      bot.sendMessage(chatId, 'üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"', {
        reply_markup: {
          keyboard: [
            [{ text: 'üìç –ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location: true }],
            [{ text: '–û—Ç–º–µ–Ω–∞' }]
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      });
    } else if (msg.text === '–û—Ç–º–µ–Ω–∞') {
      bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', mainMenu);
    } else if (msg.text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
      const helpText = `üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
1. –ù–∞–∂–º–∏—Ç–µ "üöñ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏".
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
4. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞".

üîî –ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –ª–∏–º–∏—Ç, –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.

üé• –í–∏–¥–µ–æ–æ–±—É—á–µ–Ω–∏–µ: [–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ]`;
      const opts = {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üí¨ –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                url: 'https://t.me/botiroffb'
              }
            ]
          ]
        }
      };
      bot.sendMessage(chatId, helpText, opts);
    } else if (states[chatId] === 'ASK_REFERRAL') {
      const referralUserId = msg.text;
      const database = readDatabase();
      const referralUser = database.users.find(u => u.userId === referralUserId);

      console.log('Referral attempt:', { referralUserId, referralUser });

      if (referralUser) {
        const user = database.users.find(u => u.userId === chatId);
        if (user) {
          user.limit_status = 1;
          user.invited_by = referralUserId;
          writeDatabase(database);
          bot.sendMessage(chatId, 'üéâ –í–∞—à –ª–∏–º–∏—Ç —Å–Ω—è—Ç! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.');
        } else {
          bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
      } else {
        bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }

      delete states[chatId];
    } else {
      const state = states[chatId];

      if (state === ASK_ORIGIN) {
        if (msg.location) {
          states[chatId] = ASK_DESTINATION;
          states[`${chatId}_origin`] = msg.location;
          bot.sendMessage(chatId, 'üìç –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.');
        } else {
          bot.sendMessage(chatId, 'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.');
        }
      } else if (state === ASK_DESTINATION) {
        if (msg.location) {
          const origin = states[`${chatId}_origin`];
          const destination = msg.location;
          const trackingId = uuidv4();

          const database = readDatabase();
          const user = database.users.find(u => u.userId === chatId);
          if (user) {
            user.usage_count += 1;
            user.trackingId = trackingId;
            writeDatabase(database);
          }

          const taxiUrl = `https://3.redirect.appmetrica.yandex.com/route?start-lat=${origin.latitude}&start-lon=${origin.longitude}&end-lat=${destination.latitude}&end-lon=${destination.longitude}&appmetrica_tracking_id=${trackingId}`;

          const opts = {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üöñ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏',
                    url: taxiUrl
                  }
                ]
              ]
            }
          };
          const advertisement = `üîî –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @botiroffb`;
          bot.sendPhoto(chatId, 'https://konstruktor.trafikbor.uz/yandex.png', {
            caption: `–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏:\n\n${advertisement}`,
            reply_markup: opts.reply_markup
          });
          bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', mainMenu);
          delete states[chatId];
          delete states[`${chatId}_origin`];
        } else if (msg.text) {
          const address = msg.text;
          axios.get('https://geocode-maps.yandex.ru/1.x/', {
            params: {
              apikey: yandexApiKey,
              format: 'json',
              geocode: address
            }
          }).then(response => {
            const geoObject = response.data.response.GeoObjectCollection.featureMember[0].GeoObject;
            const coordinates = geoObject.Point.pos.split(' ');
            const destination = {
              latitude: parseFloat(coordinates[1]),
              longitude: parseFloat(coordinates[0])
            };

            const origin = states[`${chatId}_origin`];
            const trackingId = uuidv4();

            const database = readDatabase();
            const user = database.users.find(u => u.userId === chatId);
            if (user) {
              user.usage_count += 1;
              user.trackingId = trackingId;
              writeDatabase(database);
            }

            const taxiUrl = `https://3.redirect.appmetrica.yandex.com/route?start-lat=${origin.latitude}&start-lon=${origin.longitude}&end-lat=${destination.latitude}&end-lon=${destination.longitude}&appmetrica_tracking_id=${trackingId}`;

            const opts = {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üöñ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏',
                      url: taxiUrl
                    }
                  ]
                ]
              }
            };
            const advertisement = `üîî –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @botiroffb`;
            bot.sendPhoto(chatId, 'https://konstruktor.trafikbor.uz/yandex.png', {
              caption: `–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏:\n\n${advertisement}`,
              reply_markup: opts.reply_markup
            });
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', mainMenu);
            delete states[chatId];
            delete states[`${chatId}_origin`];
          }).catch(error => {
            console.error(error);
            bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          });
        } else {
          bot.sendMessage(chatId, 'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å.');
        }
      }
    }
  });
});

function checkUsageLimit(chatId, callback) {
  const database = readDatabase();
  const user = database.users.find(u => u.userId === chatId);

  if (user && user.limit_status === 0 && user.usage_count >= 2) {
    const referralLink = `https://t.me/yandextaxilocbot?start=${user.userId}`;
    const referralMessage = `üö´ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${referralLink}`;

    const opts = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üì® –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              switch_inline_query: `–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏! ${referralLink}`
            }
          ]
        ]
      }
    };

    bot.sendMessage(chatId, referralMessage, opts);
    states[chatId] = 'ASK_REFERRAL';
  } else {
    callback();
  }
}
